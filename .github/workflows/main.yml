# https://help.github.com/en/actions
name: Test unit
on:
  push:
    branches:
      - master
  pull_request:
env:
  ES_HTTP_PORT: 9209
jobs:
  symfony:
    name: Test UnitSymfony 5.2 (PHP ${{ matrix.php-versions }})
    # https://hub.docker.com/_/ubuntu/
    runs-on: ubuntu-20.04
    services:
      # https://docs.docker.com/samples/library/mysql/
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_unit
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: true
      matrix:
        php-versions: ['8.1']
    steps:

      # —— Setup Github actions 🐙 —————————————————————————————————————————————
      # https://github.com/actions/checkout (official)
      - name: Checkout
        uses: actions/checkout@v2

      # https://github.com/shivammathur/setup-php (community)
      - name: Setup PHP, extensions and composer with shivammathur/setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, iconv, json, mbstring
        env:
          update: true

      - name: Check PHP Version
        run: php -v

      # —— Composer 🧙‍️ —————————————————————————————————————————————————————————
      - name: Validate composer.json and composer.lock
        run: composer validate --no-check-publish --strict

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      # —— Symfony 🎵 ——————————————————————————————————————————————————————————

      - name: Check the Symfony console
        run: |
          php bin/console -V
          php bin/console about

      ## —— Static analysis ✨ —————————————————————————————————————————————————
      - name: Static analysis of PHP code
        run: |
          php bin/console about --env=prod
          
      ## —— BDD —————————————————————————————————————————————————  
      - name: Run bdd
        run: |
            php bin/console doctrine:database:drop --if-exists --force --env=test
            php bin/console doctrine:database:create --if-not-exists --env=test
            php bin/console doctrine:schema:update --env=test --force || echo "No migrations found or schema update failed"
        env:
           DATABASE_URL: mysql://root:root@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/test_unit

      ## —— Tests ✅ ———————————————————————————————————————————————————————————
      # We use the dev env here
      - name: Run unit tests on PHP ${{ matrix.php-versions }} and Symfony ${{ matrix.symfony-versions }}
        run: |
          cp phpunit.xml.dist phpunit.xml
          cp phpunit.xml.dist phpunit.xml.test
          php bin/phpunit --stop-on-failure

      ## —— Slack notification
      - name: Slack notification
        if: ${{failure()}}
        run: |
          curl -X POST -H "Content-type: application/json" --data "{\"text\":\"Test failure \"}" ${{secrets.SLACK_WEBHOOK}}
      
      - name: Slack notification success
        if: ${{success()}}
        run: |
          curl -X POST -H "Content-type: application/json" --data "{\"text\":\"Test success \"}" ${{secrets.SLACK_WEBHOOK}}
